


def fast_targeted_order(ugraph):
	""" a faster version of targeted_order based on the following pseudo-code:

	Input:  Graph g = (V, E), with V = {0,1 ... n-1)}
	Output: (ordered) list L of the nodes in V in decreasing order of their degrees.
	for k <-- 0 to n - 1 do
	    DegreeSets[k] <-- 0;  // DegreeSets[k] is a set of all nodes with degree k
	for i <-- 0 to n - 1  do
		d <-- degree(i);
		DegreeSets[d] <-- DegreeSets[d] Union {i};
	L <--[]					// L is initialized to an empty list
	i <-- 0;
	for k <-- n - 1 downto 0 do
		while DegreeSets[k] != Null do
			Let u be an arbitrary element in DegreeSets[k];
			DegreeSets[k] <-- DegreeSets[k] - {u};
			foreach neighbor v of u do
				d <-- degree(v);
				DegreeSets[d] <-- DegreeSets[d] - {v};
				DegreeSets[d - 1] <--DegreeSets[d-1] Union {v};
				L[i] <-- u;
				i <-- i + 1;
				Remove node u from g;

	return L;
	"""